name: Lichess Bot

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

env:
  LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}

jobs:
  deploy-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 350
    
    strategy:
      matrix:
        instance: [1, 2]
      fail-fast: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup engines
      run: |
        mkdir -p engines
        sudo apt-get update && sudo apt-get install -y unzip
        echo "🔄 Downloading latest Stockfish..."
        curl -L -o stockfish.zip http://abrok.eu/stockfish/latest/linux/stockfish_x64_modern.zip
        unzip -o stockfish.zip -d engines/
        mv engines/stockfish_* engines/sf
        chmod +x engines/sf
        
        # Setup other engines if they exist
        for engine in fairy-stockfish ShashChess39; do
          if [ -f "engines/$engine" ]; then
            echo "📎 Setting up $engine..."
            chmod +x "engines/$engine"
          fi
        done

    - name: Configure token
      run: |
        python3 << 'EOF'
        import yaml
        import sys
        
        try:
            with open('config.yml', 'r') as f:
                config = yaml.safe_load(f) or {}
            
            config['token'] = "${{ secrets.LICHESS_TOKEN }}"
            
            with open('config.yml', 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            print("✅ Token configuration successful")
        except Exception as e:
            print(f"❌ Error configuring token: {e}")
            sys.exit(1)
        EOF
        
    - name: Launch bot
      timeout-minutes: 340
      run: |
        echo "🤖 Starting bot instance ${{ matrix.instance }}..."
        python3 user_interface.py --non-interactive
      env:
        INSTANCE_ID: ${{ matrix.instance }}

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up instance ${{ matrix.instance }}..."
        pkill -f "python3 user_interface.py" || true
